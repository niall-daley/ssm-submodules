#!/bin/bash

set -o errexit
set -o xtrace

. $(dirname $0)/vars

usage () {
    cat <<EOF
Usage: $0 [OPTIONS]

    The following options may be given:
        --help) usage ;;

Example $0 ssm-client ssm-dashboards
EOF
        exit 1
}

build() {
    mkdir -p ${server_build_dir}/RPMS
    chmod 777 ${server_build_dir}/RPMS
    cp -r ${rpm_dir}/* ${server_build_dir}/RPMS
    cp ${root_dir}/build/ssm-server-docker/* ${server_build_dir}/

    docker run --rm -v ${server_build_dir}/RPMS:/home/builder/RPMS ${rpmbuild_docker_image} sh -c "
        createrepo_c --update /home/builder/RPMS
        # give host user permission
        find /home/builder/RPMS/ -type d -exec chmod 0777 {} \;
        find /home/builder/RPMS/ -type f -exec chmod 0666 {} \;
    "
    for rpm in $(cd ${rpm_dir}; find . -name '*.rpm'); do
        echo $rpm
        rpm_name=$(
            docker run --rm -v ${rpm_dir}:/home/builder/rpm -w /home/builder/rpm ${rpmbuild_docker_image} \
                rpm -q --qf '%{name}' -p $rpm
        )
        rpm_fullname=$(
            docker run --rm -v ${rpm_dir}:/home/builder/rpm -w /home/builder/rpm ${rpmbuild_docker_image} \
                rpm -q -p $rpm
        )
        sed -i -e "s/- ${rpm_name}$/- ${rpm_fullname}/" ${server_build_dir}/playbook-install.yml
    done

    local image_id_file=${tmp_dir}/ssm-server-image-id
    docker build --squash --no-cache --build-arg ssm_version=${ssm_version} --iidfile ${image_id_file} ${server_build_dir}/
    local image_id=$(cat ${image_id_file})

    # use clamd@scan service to scan the docker image
    local image_tar=${tmp_dir}/ssm-server-image.tar
    local image_dir=${tmp_dir}/ssm-server-image
    local cid=$(docker create ${image_id})
    docker export $cid -o ${image_tar}
    docker rm ${cid}
    mkdir -vp ${image_dir}
    rm -rf ${image_dir}/* && tar -C ${image_dir} -xf ${image_tar}

    local log_file=${logs_dir}/security-audit-scanning.log
    # empty log file first
    > ${log_file}

    # scan rkhunter log file
    check_rkhunter_log ${image_dir}/var/log/ssm-server-rkhunter.log ${log_file}
    rm -f ${image_dir}/var/log/ssm-server-rkhunter.log

    > ${tmp_dir}/ssm-server-clamdscan.log
    find ${image_dir} -type d -exec chmod 0777 {} \;
    find ${image_dir} -type f ! -executable -exec chmod 0666 {} \;
    find ${image_dir} -type f -executable -exec chmod 0777 {} \;
    find ${image_dir} -type f -print0 | xargs -0 -n1 -P$(nproc) clamdscan --multiscan --fdpass --no-summary >> ${tmp_dir}/ssm-server-clamdscan.log
    rm -rf ${image_dir}

    # scan clamdscan log file
    echo $'\n' >> ${log_file}
    check_clamdscan_log ${tmp_dir}/ssm-server-clamdscan.log ${log_file}

    if [ -z "${DOCKER_TAG}" ]; then
        docker tag ${image_id} shatteredsilicon/ssm-server:${ssm_version}
        docker tag ${image_id} shatteredsilicon/ssm-server:latest
    else
        docker tag ${image_id} ${DOCKER_TAG}
    fi
}

check_rkhunter_log() {
    local log_file=$1
    local dest_file=$2

    echo $'rkhunter scanning\n=================\n' >> "$dest_file"

    if [ -s "$log_file" ]; then
        while read -r line; do
            if [ -z "$line" ] || [[ "$line" =~ ^[[:space:]]+$ ]]; then
                break
            else
                echo "$line" >> "$dest_file"
            fi
        done < "$log_file"
    fi
}

check_clamdscan_log() {
    local log_file=$1
    local dest_file=$2

    echo $'clamav scanning\n===============\n' >> "$dest_file"

    while read -r line; do
        if ! [[ "$line" =~ ': OK'$ ]]; then
            echo "$line" >> "$dest_file"
        fi
    done < "$log_file"
}

main() {
    declare -a TMP_PACKAGES

    for arg do
        val=`echo "$arg" | sed -e 's;^--[^=]*=;;'`
        case "$arg" in
            *)              usage ;;
        esac
    done

    VERSION=${VERSION:-$(cd ${root_dir}; git tag -l --sort=-version:refname "v*" --merged | head -n 1)}
    build
}

main $@
